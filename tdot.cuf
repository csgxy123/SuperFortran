program tdot

    ! Compile with "pgfortran -mp tdot.cut -lcublas -lacml
    ! Compile with "pgfortran -mp tdot.cuf -lcublas -lblas
    use cublas
    use cudafor
    use omp_lib
    !
    integer, parameter :: N = 10000
    real*8  :: x(N), y(N), z
    real*8, device, allocatable :: xd0(:), yd0(:)
    real*8, device, allocatable :: xd1(:), yd1(:)
    real*8, allocatable :: zh(:)
    real*8, allocatable, device :: zd(:)
    integer, allocatable :: istats(:), offs(:)
    real*8  reslts(3)
    type(c_devptr)      :: zdptr
    type(cublasHandle)  :: h
    integer :: ii, nsec, nthr, i, istat

    ! Max at 2 threads for now
    nthr = omp_get_max_threads()
    if (nthr .gt. 2) nthr = 2
    call omp_set_num_threads(nthr)
    ! Run on host
    call random_number(x)
    call random_number(y)
    z = ddot(N, x, 1, y, 1)
    print *, "HostSerial", z
    ! Create a pinned memory spot
    !$omp parallel private(i, istat)
    i = omp_get_thread_num()
    istat = cudaSetDeviceFlags(cudaDeviceMapHost)
    istat = cudaSetDevice(i)
    !$omp end parallel
    allocate(zh(512), align = 4092)
    zh = 0.0d0
    istat = cudaHostRegister(C_LOC(zh(1)), 4096, cudaHostRegisterMapped)
    istat = cudaHostGetDevicePointer(zdptr, C_LOC(zh(1)), 0)
    call c_f_pointer(zdptr, zd, 512)
    ! CUDA data allocation, run on one card, blas interface
    allocate(xd0(N), yd0(N))
    xd0 = x
    yd0 = y
    z = ddot(N, xd0, 1, yd0, 1)
    ii = 1
    reslt(ii) = z
    ii = ii + 1
    deallocate(xd0)
    deallocate(yd0)
    ! Break up the array into sections
    nsec = N / nthr
    allocate(istats(nthr), offs(nthr))
    offs = (/ (i * nsec, i = 0, nthr - 1) /)

    ! Allocate and initialize the arrays
    !$omp parallel private(i, istat)
    i = omp_get_thread_num() + 1
    if (i .eq. 1) then
        allocate(xd0(nsec), yd0(nsec))
        xd0 = x(offs(i) + 1:offs(i) + nsec)
        yd0 = y(offs(i) + 1:offs(i) + nsec)
    else
        allocate(xd1(nsec), yd1(nsec))
        xd1 = x(offs(i) + 1:offs(i) + nsec)
        yd1 = y(offs(i) + 1:offs(i) + nsec)
    endif
    !$omp end parallel
    z = zh(1) + zh(2)
    reslt(ii) = z
    ii = ii + 1

    zh = 0.0d0
    ! Now write to our pinned area with the v2 blas
    !$omp parallel private(h, i, istat)
    i = omp_get_thread_num() + 1
    h = cublasGetHandle()
    istat = cublasSetPointerMode(h, CUBLAS_POINTER_MODE_DEVICE)
    if (i .eq. 1) then
        istats(i) = cublasDdot_v2(h, nsec, xd0, 1, yd0, 1, zd(1))
    else
        istats(i) = cublasDdot_v2(h, nsec, xd1, 1, yd1, 1, zd(2))
    endif
    istat = cublasSetPointerMode(h, CUBLAS_POINTER_MODE_HOST)
    istat = cudaDeviceSynchronize()
    !$omp end parallel

    z = zh(1) + zh(2)
    reslt(ii) = z

    print *, "Device, 3 ways:", reslt

    ! Deallocate the arrays
    !$omp parallel private(i)
    i = omp_get_thread_num() + 1
    if (i .eq. 1) then
        deallocate(xd0, yd0)
    else
        deallocate(xd1, yd1)
    endif
    !$omp end parallel
    deallocate(istats, offs)

end program 
